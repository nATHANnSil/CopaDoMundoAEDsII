import java.io.BufferedReader;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

//ATRIBUTOS
class Jogo {

    private int dia, mes, ano, placarSelecao1, placarSelecao2;
    private String etapa, selecao1, selecao2, local;

    // CONSTRUTORES SAO PUBLIC POR PADRÃO
    // USAR THIS.
    Jogo(int ano, String etapa, int dia, int mes, String selecao1, int placarSelecao1, int placarSelecao2,
            String selecao2, String local) {
        this.dia = dia;
        this.mes = mes;
        this.ano = ano;
        this.placarSelecao1 = placarSelecao1;
        this.placarSelecao2 = placarSelecao2;
        this.etapa = etapa;
        this.selecao1 = selecao1;
        this.selecao2 = selecao2;
        this.local = local;
    }

    public Jogo() {

    }

    // GETS E SETS PARA CADA VARIAVEL
    public int getDia() {
        return this.dia;
    }

    public void setDia(int dia) {
        this.dia = dia;
    }

    public int getMes() {
        return this.mes;
    }

    public void setMes(int mes) {
        this.mes = mes;
    }

    public int getAno() {
        return this.ano;
    }

    public void setAno(int ano) {
        this.ano = ano;
    }

    public int getPlacarSelecao1() {
        return this.placarSelecao1;
    }

    public void setPlacarSelecao1(int placarSelecao1) {
        this.placarSelecao1 = placarSelecao1;
    }

    public int getPlacarSelecao2() {
        return this.placarSelecao2;
    }

    public void setPlacarSelecao2(int placarSelecao2) {
        this.placarSelecao2 = placarSelecao2;
    }

    public String getEtapa() {
        return this.etapa;
    }

    public void setEtapa(String etapa) {
        this.etapa = etapa;
    }

    public String getSelecao1() {
        return this.selecao1;
    }

    public void setSelecao1(String selecao1) {
        this.selecao1 = selecao1;
    }

    public String getSelecao2() {
        return this.selecao2;
    }

    public void setSelecao2(String selecao2) {
        this.selecao2 = selecao2;
    }

    public String getLocal() {
        return this.local;
    }

    public void setLocal(String local) {
        this.local = local;
    }

    // CLONE
    public Jogo cloneJogo() {
        Jogo novoJogo = new Jogo();
        novoJogo.dia = this.dia;
        novoJogo.mes = this.mes;
        novoJogo.ano = this.ano;
        novoJogo.placarSelecao1 = this.placarSelecao1;
        novoJogo.placarSelecao2 = this.placarSelecao2;
        novoJogo.etapa = this.etapa;
        novoJogo.selecao1 = this.selecao1;
        novoJogo.selecao2 = this.selecao2;
        novoJogo.local = this.local;

        return novoJogo;
    }

    // LER
    public Jogo lerJogo(String leitura) {
        String linhas[] = leitura.split("#");
        Jogo jogo = new Jogo(Integer.parseInt(linhas[0]), linhas[1], Integer.parseInt(linhas[2]),
                Integer.parseInt(linhas[3]), linhas[4], Integer.parseInt(linhas[5]), Integer.parseInt(linhas[6]),
                linhas[7], linhas[8]);

        return jogo;
    }

    // IMPRIMIR
    public void imprimir() {
        System.out.println("[COPA " + this.ano + "] [" + this.etapa + "] [" + this.dia + "/" + this.mes + "] [" + this.selecao1 + " (" + this.placarSelecao1 + ") x (" + this.placarSelecao2 + ") " + this.selecao2 + "] [" + this.local + "]");
    }
    
    public boolean comparar(Jogo jogo) { //comparar objeto com objeto externo
    	if (local.compareTo(jogo.getLocal())<0) {
    		return true;
    	} else if (local.equals(jogo.getLocal())) {
    		if (mes<jogo.getMes()) {
    			return true;
    		} else if (mes==jogo.getMes()) {
    			if (dia<jogo.getDia()) {
    				return true;
    			}
    		}
    	}
    	return false;
    }
}
  
    class ArquivoTextoEscrita {

    	private BufferedWriter saida;
    		
    	ArquivoTextoEscrita(String nomeArquivo) {	
    		
    		try {
    			saida = new BufferedWriter(new FileWriter(nomeArquivo));
    		}
    		catch (FileNotFoundException excecao) {
    			System.out.println("Arquivo nao encontrado");
    		}
    		catch (IOException excecao) {
    			System.out.println("Erro na abertura do arquivo de escrita: " + excecao);
    		}
    	}
    	
    	public void fecharArquivo() {
    		
    		try {
    			saida.close();
    		}
    		catch (IOException excecao) {
    			System.out.println("Erro no fechamento do arquivo de escrita: " + excecao);	
    		}
    	}
    	
    	public void escrever(String textoEntrada) {
    	
    		try {
    			saida.write(textoEntrada);
    			saida.newLine();
    		}
    		catch (IOException excecao){
    			System.out.println("Erro de entrada/saída " + excecao);
    		}
    	}
    }
    
    class ArquivoTextoLeitura {

    	private BufferedReader entrada;
    	
    	ArquivoTextoLeitura(String nomeArquivo) {	
    		
    		try {
    			entrada = new BufferedReader(new FileReader(nomeArquivo));
    		}
    		catch (FileNotFoundException excecao) {
    			System.out.println("Arquivo nao encontrado");
    		}
    	}
    	
    	public void fecharArquivo() {
    		
    		try {
    			entrada.close();
    		}
    		catch (IOException excecao) {
    			System.out.println("Erro no fechamento do arquivo de leitura: " + excecao);	
    		}
    	}
    	
    	@SuppressWarnings("finally")
    	public String lerArquivo() {
    		
    		String textoEntrada = null;
    		
    		try {
    			textoEntrada = entrada.readLine();
    		}
    		catch (EOFException excecao) { //Excecao de final de arquivo.
    			textoEntrada = null;
    		}
    		catch (IOException excecao) {
    			System.out.println("Erro de leitura: " + excecao);
    			textoEntrada = null;
    		}
    		finally {
    			return textoEntrada;
    		}
    	}
    }    


public class Main {

	public static void metodoLeitura(Jogo[] vetor) {
		ArquivoTextoLeitura file = new ArquivoTextoLeitura("src/partidas.txt");

		String dados = file.lerArquivo();

		int i = 0;

		while (dados != null) {
			Jogo jogo2 = new Jogo();
			vetor[i++] = jogo2.lerJogo(dados);
			dados = file.lerArquivo();
		}

		file.fecharArquivo();

	}

	public static void metodoEscrita() {
		ArquivoTextoEscrita escrita = new ArquivoTextoEscrita("695038_mergesort.txt"); // tpm/695038.mergesort.txt
		escrita.escrever("695038");
		escrita.escrever("tempo");

	}

	
	private static void mergesort(Jogo[] array, int esq, int dir) {
		if (esq < dir) {
			int meio = (esq + dir) / 2;
			mergesort(array, esq, meio);
			mergesort(array, meio + 1, dir);
			intercalar(array, esq, meio, dir);
		}
	}

	private static void intercalar(Jogo[] array, int esq, int meio, int dir) {

		int n1, n2, i, j, k;

		// Definir tamanho dos dois subarrays
		n1 = meio - esq + 1;
		n2 = dir - meio;

		Jogo[] a1 = new Jogo[n1];
		Jogo[] a2 = new Jogo[n2];

		// Inicializar primeiro subarray
		for (i = 0; i < n1; i++) {
			a1[i] = array[esq + i];
		}

		// Inicializar segundo subarray
		for (j = 0; j < n2; j++) {
			a2[j] = array[meio + j + 1];
		}

		// Intercalação propriamente dita
		for (i = j = 0, k = esq; (i < n1 && j < n2); k++) {
			if (a1[i].comparar(a2[j])||a1[i]==a2[j])
				array[k] = a1[i++];
			else
				array[k] = a2[j++];
		}

		if (i == n1)
			for (; k <= dir; k++) {
				array[k] = a2[j++];
			}
		else
			for (; k <= dir; k++) {
				array[k] = a1[i++];
			}
	}

	public static void main(String[] args) throws Exception {

		Jogo vetor[] = new Jogo[1000];

		metodoLeitura(vetor);

		String entrada;

		int quantidade = MyIO.readInt();

		Jogo vetor2[] = new Jogo[quantidade];

		int index = 0;

		for (int i = 0; i < quantidade; i++) {
			entrada = MyIO.readLine();
			String data = entrada.split(";")[0];
			String selecao1 = entrada.split(";")[1];
			int dia = Integer.parseInt(data.split("/")[0]);
			int mes = Integer.parseInt(data.split("/")[1]);
			int ano = Integer.parseInt(data.split("/")[2]);

			for (int w = 0; w < 900; w++) {
				if (vetor[w].getDia() == dia && vetor[w].getMes() == mes && vetor[w].getAno() == ano
						&& vetor[w].getSelecao1().equals(selecao1)) {
					vetor2[index++] = vetor[w];
				}

			}
		}

		mergesort(vetor2, 0, quantidade-1);

		for (int x = 0; x < quantidade; x++) {
			vetor2[x].imprimir();
		}

	}
}

